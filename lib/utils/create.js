import _pathOr from "ramda/src/pathOr";
import _dissocPath from "ramda/src/dissocPath";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _forEach from "ramda/src/forEach";
import _propOr from "ramda/src/propOr";
import _includesInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/includes";
import _nth from "ramda/src/nth";
import _split from "ramda/src/split";
import _pipe from "ramda/src/pipe";
import _assocPath from "ramda/src/assocPath";
import _path from "ramda/src/path";
import _append from "ramda/src/append";
import _assoc from "ramda/src/assoc";
import _prop from "ramda/src/prop";
export var initState = {
  index: -1,
  stack: []
};
export var handleStackPop = function handleStackPop(state) {
  var stack = _prop('stack', state);

  stack.pop();
  var newIndex = _prop('index', state) - 1;
  state = _assoc('stack', stack, state);
  return _assoc('index', newIndex, state);
};
export var handleStackPush = function handleStackPush(state, action) {
  var stack = _prop('stack', state);

  var newIndex = _prop('index', state) + 1;
  state = _assoc('stack', _append({
    modelName: _path(['payload', 'modelName'], action)
  }, stack), state);
  state = _assoc('index', newIndex, state);
  return _assocPath(['stack', newIndex, 'fields'], {}, state);
};
export var clearFormStack = function clearFormStack() {
  return initState;
};
export var handleEnterFormStack = function handleEnterFormStack(state, action) {
  state = clearFormStack();

  var originPath = _path(['payload', 'path'], action);

  state = handleStackPush(state, action);
  return _assoc('originPath', originPath, state);
};
export var handleDetailCreate = function handleDetailCreate(schema, state, action) {
  var payload = _prop('payload', action);

  var node = _prop('node', payload);

  var targetInverseFieldName = _prop('targetInverseFieldName', payload);

  var getParentModelName = _pipe( // @ts-ignore
  _prop('path'), _split('/'), _nth(1));

  var parentModelName = getParentModelName(payload);
  var parentName = schema.getDisplayValue({
    modelName: parentModelName,
    node: node
  });

  var parentId = _prop('id', node);

  var type = schema.getType(_path(['payload', 'modelName'], action), targetInverseFieldName);
  var fieldData = {
    label: parentName,
    value: parentId,
    disabled: true
  };
  var prepopulatedField = _includesInstanceProperty(type).call(type, 'ToMany') ? [fieldData] : fieldData;
  state = _assocPath(['stack', 0, 'fields', targetInverseFieldName], prepopulatedField, handleEnterFormStack(state, action));
  state = _assoc('originModelName', parentModelName, state);
  state = _assoc('originFieldName', targetInverseFieldName, state);
  return _assoc('originNode', node, state);
};
export var handleCreateInputChange = function handleCreateInputChange(state, action) {
  var currentIndex = _prop('index', state);

  var payload = _prop('payload', action);

  return _assocPath(['stack', currentIndex, 'fields', payload.fieldName], payload.value, state);
};
export var handleValidationErrorCreate = function handleValidationErrorCreate(state, action) {
  var payload = _prop('payload', action);

  var stackIndex = _prop('index', state);

  var errors = _propOr([], 'errors', payload); // todo: check works


  _forEach(function (fieldNameError) {
    state = _assocPath(['stack', stackIndex, 'errors', fieldNameError], _prop(fieldNameError, errors), state);
  }, _Object$keys(errors));

  return state;
};
export var handleClearErrorSave = function handleClearErrorSave(state) {
  return _dissocPath(['stack', _prop('index', state), 'errors'], state);
};
export var selectCreate = function selectCreate(state) {
  return _pathOr(initState, ['conveyor', 'create'], state);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,