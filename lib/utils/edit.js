import _path from "ramda/src/path";
import _isNil from "ramda/src/isNil";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _includesInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/includes";
import _type from "ramda/src/type";
import _prop from "ramda/src/prop";
export var initState = {};
export var getEditValue = function getEditValue(_ref) {
  var schema = _ref.schema,
      modelName = _ref.modelName,
      fieldName = _ref.fieldName,
      value = _ref.value;
  var field = schema.getField(modelName, fieldName);

  var fieldType = _prop('type', field);

  if (_type(fieldType) === 'Object') {
    var type = _prop('type', fieldType);

    var relModelName = _prop('target', fieldType);

    if (_includesInstanceProperty(type).call(type, 'ToMany')) {
      return _mapInstanceProperty(value).call(value, function (node) {
        var displayName = schema.getDisplayValue({
          modelName: relModelName,
          node: node
        });

        var id = _prop('id', node);

        return {
          label: displayName,
          value: id
        };
      });
    } else if (_includesInstanceProperty(type).call(type, 'ToOne')) {
      if (_isNil(value)) {
        return null;
      }

      return {
        label: schema.getDisplayValue({
          modelName: relModelName,
          node: value
        }),
        value: _prop('id', value)
      };
    } else {
      return _prop('id', value);
    }
  } else if (fieldType === 'enum') {
    if (_isNil(value)) {
      return null;
    }

    return {
      label: _path(['choices', value], field),
      value: value
    };
  }

  return value;
};
export var selectEdit = function selectEdit(state) {
  return _path(['conveyor', 'edit'], state);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9lZGl0LnRzIl0sIm5hbWVzIjpbImluaXRTdGF0ZSIsImdldEVkaXRWYWx1ZSIsInNjaGVtYSIsIm1vZGVsTmFtZSIsImZpZWxkTmFtZSIsInZhbHVlIiwiZmllbGQiLCJnZXRGaWVsZCIsImZpZWxkVHlwZSIsInR5cGUiLCJyZWxNb2RlbE5hbWUiLCJub2RlIiwiZGlzcGxheU5hbWUiLCJnZXREaXNwbGF5VmFsdWUiLCJpZCIsImxhYmVsIiwic2VsZWN0RWRpdCIsInN0YXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFHQSxPQUFPLElBQU1BLFNBQVMsR0FBRyxFQUFsQjtBQUVQLE9BQU8sSUFBTUMsWUFBWSxHQUFHLFNBQWZBLFlBQWUsT0FVdEI7QUFBQSxNQVRKQyxNQVNJLFFBVEpBLE1BU0k7QUFBQSxNQVJKQyxTQVFJLFFBUkpBLFNBUUk7QUFBQSxNQVBKQyxTQU9JLFFBUEpBLFNBT0k7QUFBQSxNQU5KQyxLQU1JLFFBTkpBLEtBTUk7QUFDSixNQUFNQyxLQUFLLEdBQUdKLE1BQU0sQ0FBQ0ssUUFBUCxDQUFnQkosU0FBaEIsRUFBMkJDLFNBQTNCLENBQWQ7O0FBQ0EsTUFBTUksU0FBUyxHQUFHLE1BQU8sTUFBUCxFQUFlRixLQUFmLENBQWxCOztBQUNBLE1BQUksTUFBT0UsU0FBUCxNQUFzQixRQUExQixFQUFvQztBQUNsQyxRQUFNQyxJQUFJLEdBQUcsTUFBTyxNQUFQLEVBQWVELFNBQWYsQ0FBYjs7QUFDQSxRQUFNRSxZQUFZLEdBQUcsTUFBTyxRQUFQLEVBQWlCRixTQUFqQixDQUFyQjs7QUFDQSxRQUFJLDBCQUFBQyxJQUFJLE1BQUosQ0FBQUEsSUFBSSxFQUFVLFFBQVYsQ0FBUixFQUE2QjtBQUMzQixhQUFPLHFCQUFBSixLQUFLLE1BQUwsQ0FBQUEsS0FBSyxFQUFLLFVBQUNNLElBQUQsRUFBZTtBQUM5QixZQUFNQyxXQUFXLEdBQUdWLE1BQU0sQ0FBQ1csZUFBUCxDQUF1QjtBQUN6Q1YsVUFBQUEsU0FBUyxFQUFFTyxZQUQ4QjtBQUV6Q0MsVUFBQUEsSUFBSSxFQUFKQTtBQUZ5QyxTQUF2QixDQUFwQjs7QUFJQSxZQUFNRyxFQUFFLEdBQUcsTUFBTyxJQUFQLEVBQWFILElBQWIsQ0FBWDs7QUFDQSxlQUFPO0FBQUVJLFVBQUFBLEtBQUssRUFBRUgsV0FBVDtBQUFzQlAsVUFBQUEsS0FBSyxFQUFFUztBQUE3QixTQUFQO0FBQ0QsT0FQVyxDQUFaO0FBUUQsS0FURCxNQVNPLElBQUksMEJBQUFMLElBQUksTUFBSixDQUFBQSxJQUFJLEVBQVUsT0FBVixDQUFSLEVBQTRCO0FBQ2pDLFVBQUksT0FBUUosS0FBUixDQUFKLEVBQW9CO0FBQ2xCLGVBQU8sSUFBUDtBQUNEOztBQUNELGFBQU87QUFDTFUsUUFBQUEsS0FBSyxFQUFFYixNQUFNLENBQUNXLGVBQVAsQ0FBdUI7QUFDNUJWLFVBQUFBLFNBQVMsRUFBRU8sWUFEaUI7QUFFNUJDLFVBQUFBLElBQUksRUFBRU47QUFGc0IsU0FBdkIsQ0FERjtBQUtMQSxRQUFBQSxLQUFLLEVBQUUsTUFBTyxJQUFQLEVBQWFBLEtBQWI7QUFMRixPQUFQO0FBT0QsS0FYTSxNQVdBO0FBQ0wsYUFBTyxNQUFPLElBQVAsRUFBYUEsS0FBYixDQUFQO0FBQ0Q7QUFDRixHQTFCRCxNQTBCTyxJQUFJRyxTQUFTLEtBQUssTUFBbEIsRUFBMEI7QUFDL0IsUUFBSSxPQUFRSCxLQUFSLENBQUosRUFBb0I7QUFDbEIsYUFBTyxJQUFQO0FBQ0Q7O0FBQ0QsV0FBTztBQUFFVSxNQUFBQSxLQUFLLEVBQUUsTUFBTyxDQUFDLFNBQUQsRUFBWVYsS0FBWixDQUFQLEVBQTJCQyxLQUEzQixDQUFUO0FBQTRDRCxNQUFBQSxLQUFLLEVBQUxBO0FBQTVDLEtBQVA7QUFDRDs7QUFDRCxTQUFPQSxLQUFQO0FBQ0QsQ0E5Q007QUFnRFAsT0FBTyxJQUFNVyxVQUFVLEdBQUcsU0FBYkEsVUFBYSxDQUFDQyxLQUFEO0FBQUEsU0FBZ0IsTUFBTyxDQUFDLFVBQUQsRUFBYSxNQUFiLENBQVAsRUFBNkJBLEtBQTdCLENBQWhCO0FBQUEsQ0FBbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSIGZyb20gJ3JhbWRhJ1xuaW1wb3J0IHsgU2NoZW1hQnVpbGRlciB9IGZyb20gJ0BhdXRvaW52ZW50L2NvbnZleW9yLXNjaGVtYSdcblxuZXhwb3J0IGNvbnN0IGluaXRTdGF0ZSA9IHt9XG5cbmV4cG9ydCBjb25zdCBnZXRFZGl0VmFsdWUgPSAoe1xuICBzY2hlbWEsXG4gIG1vZGVsTmFtZSxcbiAgZmllbGROYW1lLFxuICB2YWx1ZVxufToge1xuICBzY2hlbWE6IFNjaGVtYUJ1aWxkZXJcbiAgbW9kZWxOYW1lOiBzdHJpbmdcbiAgZmllbGROYW1lOiBzdHJpbmdcbiAgdmFsdWU6IGFueVxufSkgPT4ge1xuICBjb25zdCBmaWVsZCA9IHNjaGVtYS5nZXRGaWVsZChtb2RlbE5hbWUsIGZpZWxkTmFtZSlcbiAgY29uc3QgZmllbGRUeXBlID0gUi5wcm9wKCd0eXBlJywgZmllbGQpXG4gIGlmIChSLnR5cGUoZmllbGRUeXBlKSA9PT0gJ09iamVjdCcpIHtcbiAgICBjb25zdCB0eXBlID0gUi5wcm9wKCd0eXBlJywgZmllbGRUeXBlKVxuICAgIGNvbnN0IHJlbE1vZGVsTmFtZSA9IFIucHJvcCgndGFyZ2V0JywgZmllbGRUeXBlKVxuICAgIGlmICh0eXBlLmluY2x1ZGVzKCdUb01hbnknKSkge1xuICAgICAgcmV0dXJuIHZhbHVlLm1hcCgobm9kZTogYW55KSA9PiB7XG4gICAgICAgIGNvbnN0IGRpc3BsYXlOYW1lID0gc2NoZW1hLmdldERpc3BsYXlWYWx1ZSh7XG4gICAgICAgICAgbW9kZWxOYW1lOiByZWxNb2RlbE5hbWUsXG4gICAgICAgICAgbm9kZVxuICAgICAgICB9KVxuICAgICAgICBjb25zdCBpZCA9IFIucHJvcCgnaWQnLCBub2RlKVxuICAgICAgICByZXR1cm4geyBsYWJlbDogZGlzcGxheU5hbWUsIHZhbHVlOiBpZCB9XG4gICAgICB9KVxuICAgIH0gZWxzZSBpZiAodHlwZS5pbmNsdWRlcygnVG9PbmUnKSkge1xuICAgICAgaWYgKFIuaXNOaWwodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBudWxsXG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsYWJlbDogc2NoZW1hLmdldERpc3BsYXlWYWx1ZSh7XG4gICAgICAgICAgbW9kZWxOYW1lOiByZWxNb2RlbE5hbWUsXG4gICAgICAgICAgbm9kZTogdmFsdWVcbiAgICAgICAgfSksXG4gICAgICAgIHZhbHVlOiBSLnByb3AoJ2lkJywgdmFsdWUpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBSLnByb3AoJ2lkJywgdmFsdWUpXG4gICAgfVxuICB9IGVsc2UgaWYgKGZpZWxkVHlwZSA9PT0gJ2VudW0nKSB7XG4gICAgaWYgKFIuaXNOaWwodmFsdWUpKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgICByZXR1cm4geyBsYWJlbDogUi5wYXRoKFsnY2hvaWNlcycsIHZhbHVlXSwgZmllbGQpLCB2YWx1ZSB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59XG5cbmV4cG9ydCBjb25zdCBzZWxlY3RFZGl0ID0gKHN0YXRlOiBhbnkpID0+IFIucGF0aChbJ2NvbnZleW9yJywgJ2VkaXQnXSwgc3RhdGUpXG4iXX0=