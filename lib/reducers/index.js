import _reduceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/reduce";
import _map from "ramda/src/map";
import _forEachObjIndexed from "ramda/src/forEachObjIndexed";
import _mergeRight from "ramda/src/mergeRight";
import _filter from "ramda/src/filter";
import _identity from "ramda/src/identity";
import _classCallCheck from "@babel/runtime-corejs3/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/esm/createClass";
import { combineReducers } from 'redux';
import { AlertsReducer } from './alerts';
import { CreateReducer } from './create';
import { EditReducer } from './edit';
import { ModalReducer } from './modal';
import { ModelReducer } from './model';
import { OptionsReducer } from './options';
import { TooltipReducer } from './tooltip';
import { TableViewReducer } from './tableView';
import { SearchReducer } from './search';
var conveyorReducerMap = {
  alerts: AlertsReducer,
  create: CreateReducer,
  edit: EditReducer,
  modal: ModalReducer,
  model: ModelReducer,
  options: OptionsReducer,
  tooltip: TooltipReducer,
  tableView: TableViewReducer,
  search: SearchReducer
};
export var ConveyorReducer = /*#__PURE__*/function () {
  function ConveyorReducer(schema, overrides) {
    var _this = this;

    _classCallCheck(this, ConveyorReducer);

    var identity = _identity;

    var mergedReducerMap = _filter(identity, _mergeRight(conveyorReducerMap, overrides));

    _forEachObjIndexed(function (Reducer, key) {
      // @ts-ignore
      _this[key] = new Reducer(schema);
    }, mergedReducerMap);
  }

  _createClass(ConveyorReducer, [{
    key: "makeReducer",
    value: function makeReducer() {
      return combineReducers( // @ts-ignore
      _map(function (Reducer) {
        return function (state, action) {
          return _reduceInstanceProperty(Reducer).call(Reducer, state, action);
        };
      }, this));
    }
  }]);

  return ConveyorReducer;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZWR1Y2Vycy9pbmRleC50cyJdLCJuYW1lcyI6WyJjb21iaW5lUmVkdWNlcnMiLCJBbGVydHNSZWR1Y2VyIiwiQ3JlYXRlUmVkdWNlciIsIkVkaXRSZWR1Y2VyIiwiTW9kYWxSZWR1Y2VyIiwiTW9kZWxSZWR1Y2VyIiwiT3B0aW9uc1JlZHVjZXIiLCJUb29sdGlwUmVkdWNlciIsIlRhYmxlVmlld1JlZHVjZXIiLCJTZWFyY2hSZWR1Y2VyIiwiY29udmV5b3JSZWR1Y2VyTWFwIiwiYWxlcnRzIiwiY3JlYXRlIiwiZWRpdCIsIm1vZGFsIiwibW9kZWwiLCJvcHRpb25zIiwidG9vbHRpcCIsInRhYmxlVmlldyIsInNlYXJjaCIsIkNvbnZleW9yUmVkdWNlciIsInNjaGVtYSIsIm92ZXJyaWRlcyIsImlkZW50aXR5IiwibWVyZ2VkUmVkdWNlck1hcCIsIlJlZHVjZXIiLCJrZXkiLCJzdGF0ZSIsImFjdGlvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFDQSxTQUFTQSxlQUFULFFBQWdDLE9BQWhDO0FBQ0EsU0FBU0MsYUFBVCxRQUE4QixVQUE5QjtBQUNBLFNBQVNDLGFBQVQsUUFBOEIsVUFBOUI7QUFDQSxTQUFTQyxXQUFULFFBQTRCLFFBQTVCO0FBQ0EsU0FBU0MsWUFBVCxRQUE2QixTQUE3QjtBQUNBLFNBQVNDLFlBQVQsUUFBNkIsU0FBN0I7QUFDQSxTQUFTQyxjQUFULFFBQStCLFdBQS9CO0FBQ0EsU0FBU0MsY0FBVCxRQUErQixXQUEvQjtBQUNBLFNBQVNDLGdCQUFULFFBQWlDLGFBQWpDO0FBQ0EsU0FBU0MsYUFBVCxRQUE4QixVQUE5QjtBQUdBLElBQU1DLGtCQUFrQixHQUFHO0FBQ3pCQyxFQUFBQSxNQUFNLEVBQUVWLGFBRGlCO0FBRXpCVyxFQUFBQSxNQUFNLEVBQUVWLGFBRmlCO0FBR3pCVyxFQUFBQSxJQUFJLEVBQUVWLFdBSG1CO0FBSXpCVyxFQUFBQSxLQUFLLEVBQUVWLFlBSmtCO0FBS3pCVyxFQUFBQSxLQUFLLEVBQUVWLFlBTGtCO0FBTXpCVyxFQUFBQSxPQUFPLEVBQUVWLGNBTmdCO0FBT3pCVyxFQUFBQSxPQUFPLEVBQUVWLGNBUGdCO0FBUXpCVyxFQUFBQSxTQUFTLEVBQUVWLGdCQVJjO0FBU3pCVyxFQUFBQSxNQUFNLEVBQUVWO0FBVGlCLENBQTNCO0FBWUEsV0FBYVcsZUFBYjtBQUNFLDJCQUFZQyxNQUFaLEVBQW1DQyxTQUFuQyxFQUFvRDtBQUFBOztBQUFBOztBQUNsRCxRQUFNQyxRQUE2QixZQUFuQzs7QUFDQSxRQUFNQyxnQkFBZ0IsR0FBRyxRQUN2QkQsUUFEdUIsRUFFdkIsWUFBYWIsa0JBQWIsRUFBaUNZLFNBQWpDLENBRnVCLENBQXpCOztBQUlBLHVCQUFvQixVQUFDRyxPQUFELEVBQVVDLEdBQVYsRUFBa0I7QUFDcEM7QUFDQSxNQUFBLEtBQUksQ0FBQ0EsR0FBRCxDQUFKLEdBQVksSUFBSUQsT0FBSixDQUFZSixNQUFaLENBQVo7QUFDRCxLQUhELEVBR0dHLGdCQUhIO0FBSUQ7O0FBWEg7QUFBQTtBQUFBLGtDQWFxQjtBQUNqQixhQUFPeEIsZUFBZSxFQUNwQjtBQUNBLFdBQU0sVUFBQXlCLE9BQU87QUFBQSxlQUFJLFVBQUNFLEtBQUQsRUFBUUMsTUFBUjtBQUFBLGlCQUFtQix3QkFBQUgsT0FBTyxNQUFQLENBQUFBLE9BQU8sRUFBUUUsS0FBUixFQUFlQyxNQUFmLENBQTFCO0FBQUEsU0FBSjtBQUFBLE9BQWIsRUFBbUUsSUFBbkUsQ0FGb0IsQ0FBdEI7QUFJRDtBQWxCSDs7QUFBQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUiBmcm9tICdyYW1kYSdcbmltcG9ydCB7IGNvbWJpbmVSZWR1Y2VycyB9IGZyb20gJ3JlZHV4J1xuaW1wb3J0IHsgQWxlcnRzUmVkdWNlciB9IGZyb20gJy4vYWxlcnRzJ1xuaW1wb3J0IHsgQ3JlYXRlUmVkdWNlciB9IGZyb20gJy4vY3JlYXRlJ1xuaW1wb3J0IHsgRWRpdFJlZHVjZXIgfSBmcm9tICcuL2VkaXQnXG5pbXBvcnQgeyBNb2RhbFJlZHVjZXIgfSBmcm9tICcuL21vZGFsJ1xuaW1wb3J0IHsgTW9kZWxSZWR1Y2VyIH0gZnJvbSAnLi9tb2RlbCdcbmltcG9ydCB7IE9wdGlvbnNSZWR1Y2VyIH0gZnJvbSAnLi9vcHRpb25zJ1xuaW1wb3J0IHsgVG9vbHRpcFJlZHVjZXIgfSBmcm9tICcuL3Rvb2x0aXAnXG5pbXBvcnQgeyBUYWJsZVZpZXdSZWR1Y2VyIH0gZnJvbSAnLi90YWJsZVZpZXcnXG5pbXBvcnQgeyBTZWFyY2hSZWR1Y2VyIH0gZnJvbSAnLi9zZWFyY2gnXG5pbXBvcnQgeyBTY2hlbWFCdWlsZGVyIH0gZnJvbSAnQGF1dG9pbnZlbnQvY29udmV5b3Itc2NoZW1hJ1xuXG5jb25zdCBjb252ZXlvclJlZHVjZXJNYXAgPSB7XG4gIGFsZXJ0czogQWxlcnRzUmVkdWNlcixcbiAgY3JlYXRlOiBDcmVhdGVSZWR1Y2VyLFxuICBlZGl0OiBFZGl0UmVkdWNlcixcbiAgbW9kYWw6IE1vZGFsUmVkdWNlcixcbiAgbW9kZWw6IE1vZGVsUmVkdWNlcixcbiAgb3B0aW9uczogT3B0aW9uc1JlZHVjZXIsXG4gIHRvb2x0aXA6IFRvb2x0aXBSZWR1Y2VyLFxuICB0YWJsZVZpZXc6IFRhYmxlVmlld1JlZHVjZXIsXG4gIHNlYXJjaDogU2VhcmNoUmVkdWNlclxufVxuXG5leHBvcnQgY2xhc3MgQ29udmV5b3JSZWR1Y2VyIHtcbiAgY29uc3RydWN0b3Ioc2NoZW1hOiBTY2hlbWFCdWlsZGVyLCBvdmVycmlkZXM/OiBhbnkpIHtcbiAgICBjb25zdCBpZGVudGl0eTogKHZhbHVlOiBhbnkpID0+IGFueSA9IFIuaWRlbnRpdHlcbiAgICBjb25zdCBtZXJnZWRSZWR1Y2VyTWFwID0gUi5maWx0ZXIoXG4gICAgICBpZGVudGl0eSxcbiAgICAgIFIubWVyZ2VSaWdodChjb252ZXlvclJlZHVjZXJNYXAsIG92ZXJyaWRlcylcbiAgICApXG4gICAgUi5mb3JFYWNoT2JqSW5kZXhlZCgoUmVkdWNlciwga2V5KSA9PiB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB0aGlzW2tleV0gPSBuZXcgUmVkdWNlcihzY2hlbWEpXG4gICAgfSwgbWVyZ2VkUmVkdWNlck1hcClcbiAgfVxuXG4gIG1ha2VSZWR1Y2VyKCk6IGFueSB7XG4gICAgcmV0dXJuIGNvbWJpbmVSZWR1Y2VycyhcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIFIubWFwKFJlZHVjZXIgPT4gKHN0YXRlLCBhY3Rpb24pID0+IFJlZHVjZXIucmVkdWNlKHN0YXRlLCBhY3Rpb24pLCB0aGlzKVxuICAgIClcbiAgfVxufVxuIl19