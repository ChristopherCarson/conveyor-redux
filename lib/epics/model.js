import "core-js/modules/es.date.to-string";
import "core-js/modules/es.object.to-string";
import "core-js/modules/es.regexp.to-string";
import _Reflect$construct from "@babel/runtime-corejs3/core-js-stable/reflect/construct";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _join from "ramda/src/join";
import _prop from "ramda/src/prop";
import _classCallCheck from "@babel/runtime-corejs3/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/esm/createClass";
import _inherits from "@babel/runtime-corejs3/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime-corejs3/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime-corejs3/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import * as Actions from '../actions';
import { FETCH_MODEL_INDEX, FETCH_MODEL_DETAIL, REQUEST_DELETE_MODEL, REQUEST_DELETE_REL_TABLE_MODEL, REQUEST_DELETE_MODEL_FROM_DETAIL_PAGE, CHANGE_PAGE } from '../actionConsts';
import { getFilters, getSort, getPage, getDeleteErrors } from '../utils/helpers';
import { map, mergeMap, switchMap } from 'rxjs/operators';
import { ofType } from 'redux-observable';
import { selectTableView } from '../utils/tableView';
import { concat } from 'rxjs';
import * as Logger from '../utils/Logger';
import { Epic } from './epic';
export var ModelEpic = /*#__PURE__*/function (_Epic) {
  _inherits(ModelEpic, _Epic);

  var _super = _createSuper(ModelEpic);

  function ModelEpic() {
    _classCallCheck(this, ModelEpic);

    return _super.apply(this, arguments);
  }

  _createClass(ModelEpic, [{
    key: FETCH_MODEL_INDEX,
    value: function value(action$, state$) {
      var _this = this;

      return action$.pipe(ofType(FETCH_MODEL_INDEX, CHANGE_PAGE), map(_prop('payload')), map(function (payload) {
        var variables = {
          filter: getFilters({
            schema: _this.schema,
            modelName: payload.modelName,
            tableView: selectTableView(state$.value)
          }),
          sort: getSort({
            schema: _this.schema,
            modelName: payload.modelName,
            tableView: selectTableView(state$.value)
          }),
          page: getPage({
            modelName: payload.modelName,
            tableView: selectTableView(state$.value)
          })
        };
        return {
          modelName: payload.modelName,
          variables: variables
        };
      }), mergeMap(function (context) {
        var query = _this.queryBuilder.buildQuery({
          modelName: context.modelName,
          queryType: 'index'
        });

        return _this.queryBuilder.sendRequest({
          query: query,
          variables: context.variables
        }).then(function (_ref) {
          var data = _ref.data,
              error = _ref.error;
          return {
            context: context,
            data: data,
            error: error
          };
        });
      }), map(function (_ref2) {
        var context = _ref2.context,
            data = _ref2.data,
            error = _ref2.error;

        if (error) {
          return Actions.addDangerAlert({
            message: "Error loading ".concat(context.modelName, " index.")
          });
        }

        return Actions.updateModelIndex({
          modelName: context.modelName,
          data: data
        });
      }));
    }
  }, {
    key: FETCH_MODEL_DETAIL,
    value: function value(action$) {
      var _this2 = this;

      return action$.pipe(ofType(FETCH_MODEL_DETAIL), map(_prop('payload')), map(function (payload) {
        var variables = {
          id: payload.id
        };
        return {
          modelName: payload.modelName,
          id: payload.id,
          variables: variables
        };
      }), mergeMap(function (context) {
        var query = _this2.queryBuilder.buildQuery({
          modelName: context.modelName,
          queryType: 'detail'
        });

        return _this2.queryBuilder.sendRequest({
          query: query,
          variables: context.variables
        }).then(function (_ref3) {
          var data = _ref3.data,
              error = _ref3.error;
          return {
            context: context,
            data: data,
            error: error
          };
        });
      }), switchMap(function (_ref4) {
        var context = _ref4.context,
            data = _ref4.data,
            error = _ref4.error;

        if (error) {
          return concat([Actions.addDangerAlert({
            message: "Error loading ".concat(context.modelName, " details.")
          }), Actions.modelNotFound({
            modelName: context.modelName
          })]);
        }

        return concat([Actions.updateModelDetail({
          modelName: context.modelName,
          id: context.id,
          data: data
        })]);
      }));
    }
  }, {
    key: REQUEST_DELETE_MODEL,
    value: function value(action$) {
      var _this3 = this;

      return action$.pipe(ofType(REQUEST_DELETE_MODEL), map(_prop('payload')), map(function (payload) {
        var query = _this3.queryBuilder.buildQuery({
          modelName: payload.modelName,
          queryType: 'delete'
        });

        var variables = {
          id: payload.id
        };
        return {
          modelName: payload.modelName,
          id: payload.id,
          query: query,
          variables: variables
        };
      }), mergeMap(function (context) {
        return _this3.queryBuilder.sendRequest({
          query: context.query,
          variables: context.variables
        }).then(function (_ref5) {
          var data = _ref5.data,
              error = _ref5.error;
          return {
            context: context,
            data: data,
            error: error
          };
        });
      }), switchMap(function (_ref6) {
        var context = _ref6.context,
            data = _ref6.data,
            error = _ref6.error;

        // todo: pass 'node' and 'data' props
        // @ts-ignore
        var displayName = _this3.schema.getModelLabel({
          modelName: context.modelName
        }); // get errors from context


        var errors = getDeleteErrors({
          data: data,
          context: context
        });

        if (errors) {
          var _context;

          Logger.epicError('requestDeleteModelEpic', context, error);

          var contactErrors = _join('. ', errors);

          return concat([Actions.addDangerAlert({
            message: _concatInstanceProperty(_context = "Error deleting ".concat(displayName, ". ")).call(_context, contactErrors)
          })]);
        } // get errors from 'error' prop


        if (error) {
          Logger.epicError('requestDeleteModelEpic', context, error);
          return concat([Actions.addDangerAlert({
            message: "Error deleting ".concat(displayName, ".")
          })]);
        }

        return concat([Actions.updateDeleteModel({
          modelName: context.modelName,
          id: context.id
        }), Actions.addSuccessAlert({
          message: "".concat(displayName, " was successfully deleted.")
        })]);
      }));
    }
  }, {
    key: REQUEST_DELETE_REL_TABLE_MODEL,
    value: function value(action$) {
      var _this4 = this;

      return action$.pipe(ofType(REQUEST_DELETE_REL_TABLE_MODEL), map(_prop('payload')), map(function (payload) {
        var query = _this4.queryBuilder.buildQuery({
          modelName: payload.modelName,
          queryType: 'delete'
        });

        var variables = {
          id: payload.id
        };
        return _Object$assign({}, payload, {
          query: query,
          variables: variables
        });
      }), mergeMap(function (context) {
        return _this4.queryBuilder.sendRequest({
          query: context.query,
          variables: context.variables
        }).then(function (_ref7) {
          var data = _ref7.data,
              error = _ref7.error;
          return {
            context: context,
            data: data,
            error: error
          };
        });
      }), switchMap(function (_ref8) {
        var context = _ref8.context,
            data = _ref8.data,
            error = _ref8.error;

        // todo: pass node and data props in
        // @ts-ignore
        var displayName = _this4.schema.getModelLabel({
          modelName: context.modelName
        }); // get errors from context


        var errors = getDeleteErrors({
          data: data,
          context: context
        });

        if (errors) {
          var _context2;

          Logger.epicError('requestDeleteModelEpic', context, error);

          var contactErrors = _join('. ', errors);

          return concat([Actions.addDangerAlert({
            message: _concatInstanceProperty(_context2 = "Error deleting ".concat(displayName, ". ")).call(_context2, contactErrors)
          })]);
        }

        if (error) {
          Logger.epicError('requestDeleteRelTableModelEpic', context, error);
          return concat([Actions.addDangerAlert({
            message: "Error deleting ".concat(displayName, ".")
          })]);
        }

        return concat([Actions.fetchModelDetail({
          modelName: context.parentModel,
          id: context.parentId
        }), Actions.addSuccessAlert({
          message: "".concat(displayName, " was successfully deleted.")
        })]);
      }));
    }
  }, {
    key: REQUEST_DELETE_MODEL_FROM_DETAIL_PAGE,
    value: function value(action$) {
      var _this5 = this;

      return action$.pipe(ofType(REQUEST_DELETE_MODEL_FROM_DETAIL_PAGE), map(_prop('payload')), map(function (payload) {
        var query = _this5.queryBuilder.buildQuery({
          modelName: payload.modelName,
          queryType: 'delete'
        });

        var variables = {
          id: payload.id
        };
        return {
          modelName: payload.modelName,
          id: payload.id,
          query: query,
          variables: variables
        };
      }), mergeMap(function (context) {
        return _this5.queryBuilder.sendRequest({
          query: context.query,
          variables: context.variables
        }).then(function (_ref9) {
          var data = _ref9.data,
              error = _ref9.error;
          return {
            context: context,
            data: data,
            error: error
          };
        });
      }), switchMap(function (_ref10) {
        var context = _ref10.context,
            data = _ref10.data,
            error = _ref10.error;

        // todo: pass node and data props in
        // @ts-ignore
        var displayName = _this5.schema.getModelLabel({
          modelName: context.modelName
        }); // get errors from context


        var errors = getDeleteErrors({
          data: data,
          context: context
        });

        if (errors) {
          var _context3;

          Logger.epicError('requestDeleteModelEpic', context, error);

          var contactErrors = _join('. ', errors);

          return concat([Actions.addDangerAlert({
            message: _concatInstanceProperty(_context3 = "Error deleting ".concat(displayName, ". ")).call(_context3, contactErrors)
          })]);
        }

        if (error) {
          Logger.epicError('requestDeleteModelFromDetailPageEpic', context, error);
          return concat([Actions.addDangerAlert({
            message: "Error deleting ".concat(displayName, ".")
          })]);
        }

        return concat([Actions.removeInstance({
          modelName: context.modelName,
          id: context.id
        }), Actions.addSuccessAlert({
          message: "".concat(displayName, " was successfully deleted.")
        })]);
      }));
    }
  }]);

  return ModelEpic;
}(Epic);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,